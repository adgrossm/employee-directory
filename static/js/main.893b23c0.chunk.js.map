{"version":3,"sources":["components/Title/title.js","components/Wrapper/Wrapper.js","Employee.js","serviceWorker.js","index.js"],"names":["Title","props","className","children","Wrapper","Employees","state","employeeList","employees","sortOrder","handleSort","whatToSort","console","log","newSort","sort","a","b","newSortOrder","setState","handleNameSort","nameToSort","nameA","toUpperCase","nameB","scope","onClick","this","map","id","firstName","lastName","department","departmentId","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","Employee","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"i5BAOeA,MAJf,SAAeC,GACX,OAAO,wBAAIC,UAAU,SAASD,EAAME,W,aCGzBC,MAJf,SAAiBH,GACb,OAAO,yBAAKC,UAAU,WAAWD,EAAME,WCwF5BE,E,4MApFbC,MAAQ,CACNC,aAAcC,EACdC,UAAW,I,EAEbC,WAAa,SAACC,GACZC,QAAQC,IAAI,QACZ,IAAMC,EAAU,EAAKR,MAAMC,aAAaQ,MAAK,SAACC,EAAGC,GAC/C,MAA6B,QAAzB,EAAKX,MAAMG,UACNO,EAAEL,GAAcM,EAAEN,GAElBM,EAAEN,GAAcK,EAAEL,MAI7BC,QAAQC,IAAIC,GACZ,IAAMI,EAAwC,QAAzB,EAAKZ,MAAMG,UAAsB,MAAQ,MAC9D,EAAKU,SAAS,CAAEZ,aAAcO,EAASL,UAAWS,K,EAGpDE,eAAiB,SAACC,GAChB,IAAMP,EAAU,EAAKR,MAAMC,aAAaQ,MAAK,SAACC,EAAGC,GAC/C,IAAIK,EAAQN,EAAEK,GAAYE,cACtBC,EAAQP,EAAEI,GAAYE,cAC1B,MAA6B,QAAzB,EAAKjB,MAAMG,UACTa,EAAQE,GACF,EAENF,EAAQE,EACH,EAGF,EAEHF,EAAQE,EACH,EAELF,EAAQE,GACF,EAGH,KAIXZ,QAAQC,IAAIC,GACZ,IAAMI,EAAwC,QAAzB,EAAKZ,MAAMG,UAAsB,MAAQ,MAC9D,EAAKU,SAAS,CAAEZ,aAAcO,EAASL,UAAWS,K,uDAG5C,IAAD,OACP,OACE,oCAEE,kBAAC,EAAD,4BACA,kBAAC,EAAD,KAEE,2BAAOhB,UAAU,oBACf,+BACE,4BACE,wBAAIuB,MAAM,MAAMC,QAAS,kBAAM,EAAKhB,WAAW,QAA/C,gBACA,wBAAIe,MAAM,MAAMC,QAAS,kBAAK,EAAKN,eAAe,eAAlD,cACA,wBAAIK,MAAM,MAAMC,QAAS,kBAAK,EAAKN,eAAe,cAAlD,aACA,wBAAIK,MAAM,MAAMC,QAAS,kBAAK,EAAKN,eAAe,gBAAlD,cACA,wBAAIK,MAAM,MAAMC,QAAS,kBAAM,EAAKhB,WAAW,kBAA/C,mBAGJ,+BACGiB,KAAKrB,MAAMC,aAAaqB,KAAI,SAAApB,GAAS,OACpC,4BACE,wBAAIiB,MAAM,OAAOjB,EAAUqB,IAC3B,4BAAKrB,EAAUsB,WACf,4BAAKtB,EAAUuB,UACf,4BAAKvB,EAAUwB,YACf,4BAAKxB,EAAUyB,0B,GA1EPC,IAAMC,WCKVC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.893b23c0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props){\r\n    return <h1 className=\"title\">{props.children}</h1>;\r\n}\r\n\r\nexport default Title\r\n\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props){\r\n    return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Title from \"./components/Title/title\";\r\nimport employees from \"./employee.json\";\r\nimport Wrapper from \"./components/Wrapper/Wrapper\";\r\n\r\n\r\nclass Employees extends React.Component {\r\n  state = {\r\n    employeeList: employees,\r\n    sortOrder: ''\r\n  }\r\n  handleSort = (whatToSort) => {\r\n    console.log(\"test\")\r\n    const newSort = this.state.employeeList.sort((a, b) => {\r\n      if (this.state.sortOrder !== \"des\") {\r\n        return a[whatToSort] - b[whatToSort];\r\n      } else {\r\n        return b[whatToSort] - a[whatToSort];\r\n      }\r\n    }\r\n    );\r\n    console.log(newSort);\r\n    const newSortOrder = this.state.sortOrder === \"des\" ? \"asc\" : \"des\"\r\n    this.setState({ employeeList: newSort, sortOrder: newSortOrder })\r\n  }\r\n\r\n  handleNameSort = (nameToSort) => {\r\n    const newSort = this.state.employeeList.sort((a, b) => {\r\n      var nameA = a[nameToSort].toUpperCase();\r\n      var nameB = b[nameToSort].toUpperCase();\r\n      if (this.state.sortOrder !== \"des\") {\r\n        if (nameA < nameB) {\r\n          return -1;\r\n        }\r\n        if (nameA > nameB) {\r\n          return 1;\r\n        }\r\n        // names must be equal\r\n        return 0;\r\n      } else {\r\n        if (nameA < nameB) {\r\n          return 1;\r\n        }\r\n        if (nameA > nameB) {\r\n          return -1;\r\n        }\r\n        // names must be equal\r\n        return 0;\r\n      }\r\n    }\r\n    );\r\n    console.log(newSort);\r\n    const newSortOrder = this.state.sortOrder === \"des\" ? \"asc\" : \"des\"\r\n    this.setState({ employeeList: newSort, sortOrder: newSortOrder })\r\n  };\r\n\r\nrender() {\r\n  return (\r\n    <>\r\n\r\n      <Title>Employee Directory </Title>\r\n      <Wrapper>\r\n        {/* <div><input type=\"text\" /><button>Search</button></div> */}\r\n        <table className=\"table table-dark\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\" onClick={() => this.handleSort(\"id\")}>Employee ID#</th>\r\n              <th scope=\"col\" onClick={()=> this.handleNameSort(\"firstName\")}>First Name</th>\r\n              <th scope=\"col\" onClick={()=> this.handleNameSort(\"lastName\")}>Last Name</th>\r\n              <th scope=\"col\" onClick={()=> this.handleNameSort(\"department\")}>Department</th>\r\n              <th scope=\"col\" onClick={() => this.handleSort(\"departmentId\")}>Department ID</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.employeeList.map(employees => (\r\n              <tr>\r\n                <th scope=\"row\">{employees.id}</th>\r\n                <td>{employees.firstName}</td>\r\n                <td>{employees.lastName}</td>\r\n                <td>{employees.department}</td>\r\n                <td>{employees.departmentId}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </Wrapper>\r\n    </>\r\n  );\r\n};\r\n}\r\n\r\nexport default Employees","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Employees from \"./Employee\";\n\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    \n    <Employees />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}